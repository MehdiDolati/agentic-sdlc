name: CI
run-name: "PR #${{ github.event.pull_request.number }} â€¢ ${{ github.event.pull_request.title || github.ref_name }}"

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit tests (Python 3.12)
    runs-on: ubuntu-latest
    env:
      # Keep tests deterministic; pytest code paths use this
      PYTEST_ADDOPTS: "-q"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api/requirements.txt
          pip install pytest pytest-cov
          pytest

      - name: Run tests with coverage
        run: |
          coverage run -m pytest -q
          coverage xml -o coverage.xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  docker-integration:
    name: Docker Compose integration (API + DB)
    runs-on: ubuntu-latest
    env:
      # Mirror compose env so entrypoint.sh sees exactly these:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: appdb
      # API container reads DATABASE_URL from env and/or compose:
      DATABASE_URL: postgresql+psycopg://app:app@db:5432/notes
      # Make compose more patient on CI
      COMPOSE_HTTP_TIMEOUT: "240"
    steps:
      - uses: actions/checkout@v4

      - name: Show docker & compose versions
        run: |
          docker version
          docker compose version

      - name: Build & start stack
        run: |
          # Build and start detached; --wait is unreliable with custom health endpoints; we do our own
          docker compose up --build -d
        working-directory: .

      - name: Show container status
        run: |
          docker ps -a
          echo "--- DB logs (tail) ---"
          docker logs --tail=100 agentic-sdlc-db || true
          echo "--- API logs (tail) ---"
          docker logs --tail=100 agentic-sdlc-api || true

      - name: Wait for API /health
        run: |
          set -e
          echo "Waiting for http://127.0.0.1:8081/health ..."
          for i in $(seq 1 60); do
            if curl -fsS http://127.0.0.1:8081/health | tee /dev/stderr | grep -qi "ok\|healthy\|ready"; then
              echo "API is healthy."
              exit 0
            fi
            sleep 2
          done
          echo "Timed out waiting for API health."
          echo "--- API logs (full) ---"
          docker logs agentic-sdlc-api || true
          echo "--- DB logs (full) ---"
          docker logs agentic-sdlc-db || true
          exit 1

      - name: Smoke test endpoints
        run: |
          set -e
          curl -fsS http://127.0.0.1:8081/health
          curl -fsS http://127.0.0.1:8081/openapi.json | head -c 200 >/dev/null

      - name: Seed a plan
        run: |
          set -e
          curl -sS -X POST http://127.0.0.1:8081/requests \
          -H 'Content-Type: application/json' \
          -d '{"text":"UI smoke seed plan"}' > /tmp/seed.json
          cat /tmp/seed.json
      - name: Extract plan_id
        run: |
          set -e
          PLAN_ID=$(jq -r '.plan_id' /tmp/seed.json)
          if [ -z "$PLAN_ID" ] || [ "$PLAN_ID" = "null" ]; then
            echo "Failed to get plan_id"
            exit 1
          fi
          echo "PLAN_ID=$PLAN_ID" >> $GITHUB_ENV
      
      - name: UI list page smoke
        run: |
          set -e
          curl -sS http://127.0.0.1:8081/ui/plans | tee /tmp/plans.html
          grep -q "<h1>Plans</h1>" /tmp/plans.html
      
      - name: UI detail page smoke
        run: |
          set -e
          curl -sS "http://127.0.0.1:8081/ui/plans/${PLAN_ID}" | tee /tmp/plan.html
          grep -q "<h1>Plan</h1>" /tmp/plan.html
          grep -q "<h2>PRD</h2>" /tmp/plan.html
          grep -q "<h2>OpenAPI</h2>" /tmp/plan.html
      - name: Teardown stack
        if: always()
        run: docker compose down -v
        
  semgrep:
    name: Semgrep (SAST + Secrets)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: python -m pip install --upgrade pip
      - run: pip install semgrep==1.74.0
      - name: Scan
        run: |
          semgrep --config p/default --config p/secrets --error \
                  --exclude .venv --exclude node_modules --exclude reports --exclude check_db.py
                  
