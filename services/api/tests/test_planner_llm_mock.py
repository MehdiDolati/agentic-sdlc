# services/api/tests/test_planner_llm_mock.py
import os
from pathlib import Path
from fastapi.testclient import TestClient

import importlib

def test_planner_uses_mock_llm(tmp_path: Path, monkeypatch):
    # Isolate repo root to a temp dir so we don't pollute real docs/
    monkeypatch.setenv("PYTEST_CURRENT_TEST", "1")
    # Force LLM on, but mock provider (offline/deterministic)
    monkeypatch.setenv("LLM_PROVIDER", "mock")

    # Re-import app after env tweaks so it picks up the settings
    import app as app_module
    importlib.reload(app_module)
    app = app_module.app

    # Point the app's repo root to temp (there's a helper named _repo_root())
    def _fake_repo_root():
        return tmp_path
    app_module._repo_root = _fake_repo_root  # type: ignore

    client = TestClient(app)

    r = client.post("/requests", json={"text": "Add search to notes list"})
    assert r.status_code == 200
    plan_id = r.json()["plan_id"]
    assert plan_id

    # Look for generated files
    prd_dir = tmp_path / "docs" / "prd"
    api_dir = tmp_path / "docs" / "api" / "generated"
    assert prd_dir.exists()
    assert api_dir.exists()

    prd_paths = list(prd_dir.glob("*.md"))
    api_paths = list(api_dir.glob("*.yaml"))
    assert prd_paths, "LLM PRD not written"
    assert api_paths, "LLM OpenAPI not written"

    # Verify content contains the MockLLM fingerprint
    prd_text = prd_paths[-1].read_text()
    api_text = api_paths[-1].read_text()
    assert "(Generated by MockLLM)" in prd_text
    assert "API - Add search to notes list" in api_text