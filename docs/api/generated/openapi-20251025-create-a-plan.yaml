openapi: 3.1.0
info:
  title: User Authentication and Profile Management API
  version: 1.0.0
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: SecureP@ssw0rd
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully.
                  userId:
                    type: string
                    format: uuid
        '400':
          description: Invalid input or user already exists
  /login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
      responses:
        '200':
          description: User logged in successfully
          headers:
            Authorization:
              schema:
                type: string
                description: JWT Token
                example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful.
        '401':
          description: Invalid credentials
  /profile:
    get:
      summary: Get user profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    format: uuid
                    example: d290f1ee-6c54-4b01-90e6-d701748f0851
                  email:
                    type: string
                    format: email
                    example: user@example.com
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: Doe
        '401':
          description: Unauthorized
    put:
      summary: Update user profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Jane
                lastName:
                  type: string
                  example: Smith
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully.
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  /logout:
    post:
      summary: Log out a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Log out successful. Token invalidated.
        '401':
          description: Unauthorized
  /forgot-password:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Password reset link sent if user exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If a user with that email exists, a password reset link has been sent.
        '400':
          description: Invalid email format
  /reset-password:
    post:
      summary: Reset password with a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  description: Reset token received via email
                  example: some_long_reset_token
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  example: NewSecureP@ssw0rd
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password has been reset successfully.
        '400':
          description: Invalid or expired token, or invalid new password
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
