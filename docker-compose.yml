version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: agentic-sdlc-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb || exit 1"]
    read_only: true
    tmpfs:
      # runtime sockets / pid files
      - /run
      - /tmp
      - /var/run/postgresql  
    volumes:
      # primary data dir must be read-write
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-appdb} -h 127.0.0.1"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 5s
    restart: unless-stopped
  api:
    build: .
    image: agentic-sdlc-api:dev
    container_name: agentic-sdlc-api
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://app:app@db:5432/appdb
      POSTGRES_CONNINFO: host=db port=5432 user=app password=app dbname=appdb  # used by psycopg
      PGHOST: db
      PGPORT: "5432"
      PGUSER: app
      PGPASSWORD: app
      PGDATABASE: appdb
      UVICORN_HOST: "0.0.0.0"
      UVICORN_PORT: "8080"
    ports:
      - "${API_PORT:-8080}:8080"
    # Run DB init/migrations, then start uvicorn
    command: >
      sh -c "python services/api/tools/db_init.py &&
             uvicorn services.api.app:app
               --host 0.0.0.0
               --port 8080"
    # Hardened: read-only root FS; explicitly provide writable mounts
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    # Code is mounted read-only; /app/docs is writable so the app can emit artifacts
    volumes:
      - .:/app:ro
      - ./docs:/app/docs:rw
    tmpfs:
      - /tmp
    restart: unless-stopped

volumes:
  pgdata: {}