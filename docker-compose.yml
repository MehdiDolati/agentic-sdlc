version: "3.9"

services:
  db:
    # ...your existing settings...
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/run/postgresql
      - /tmp
    # ensure data stays writable via a volume (you likely already have this):
    volumes:
      - pgdata:/var/lib/postgresql/data
    image: postgres:15-alpine
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 || exit 1"]
      interval: 2s
      timeout: 2s
      retries: 30

  db-init:
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    environment:
      # prevents Python from writing .pyc files to the (now read-only) root fs
      PYTHONDONTWRITEBYTECODE: "1"
    build: .
    image: agentic-sdlc-api:dev
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["python", "services/api/tools/db_init.py"]
    restart: "no"

  api:
    build: .
    image: agentic-sdlc-api:dev
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./docs:/app/docs
      - ./plans:/app/plans
    security_opt:
      - no-new-privileges:true
    command: ["uvicorn", "services.api.app:app", "--host", "0.0.0.0", "--port", "8080"]
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8080/healthz').read()"]
      interval: 5s
      timeout: 3s
      retries: 20

volumes:
  pgdata:
